{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"SCI-VCF SCI-VCF is a comprehensive toolkit for summarising, comparing, inspecting, and visualising genetic variants from the variant call format (VCF). Users can download and install SCI-VCF locally or on remote servers using the code available on GitHub . Detailed installation guidelines are available here . For installation-free use, SCI-VCF is also deployed online .","title":"Home"},{"location":"#sci-vcf","text":"SCI-VCF is a comprehensive toolkit for summarising, comparing, inspecting, and visualising genetic variants from the variant call format (VCF). Users can download and install SCI-VCF locally or on remote servers using the code available on GitHub . Detailed installation guidelines are available here . For installation-free use, SCI-VCF is also deployed online .","title":"SCI-VCF"},{"location":"about/","text":"About SCI-VCF is a multi-platform application that helps users to analyse the variant call format in a guided GUI setting. Summarize, inspect, analyse, and design interactive visualisations of the genetic variants from VCFs with a mouse click. Workflows SCI-VCF has three major workflows: Summarize: Get variant statistics from a VCF file. Compare: Differentiate the variants in two VCF files. Interface: View, search, sort, inspect, filter genetic variants in a VCF file. An additional module to interface with CSV files is also available. Major Features A standalone framework for VCF analysis. User friendly GUI with intuitive design. Built for accomodating users irrespective of programmimg expertise. Interactive plots to enable detailed study. Filter genetic variants based on various parameters. Downloadable summaries for further examination. Keyword search in VCF and CSV formats. Elaborate customization features to extract publication ready plots. Easy installation and deployment across multiple platforms.","title":"About"},{"location":"about/#about","text":"SCI-VCF is a multi-platform application that helps users to analyse the variant call format in a guided GUI setting. Summarize, inspect, analyse, and design interactive visualisations of the genetic variants from VCFs with a mouse click.","title":"About"},{"location":"about/#workflows","text":"SCI-VCF has three major workflows: Summarize: Get variant statistics from a VCF file. Compare: Differentiate the variants in two VCF files. Interface: View, search, sort, inspect, filter genetic variants in a VCF file. An additional module to interface with CSV files is also available.","title":"Workflows"},{"location":"about/#major-features","text":"A standalone framework for VCF analysis. User friendly GUI with intuitive design. Built for accomodating users irrespective of programmimg expertise. Interactive plots to enable detailed study. Filter genetic variants based on various parameters. Downloadable summaries for further examination. Keyword search in VCF and CSV formats. Elaborate customization features to extract publication ready plots. Easy installation and deployment across multiple platforms.","title":"Major Features"},{"location":"change_log/","text":"","title":"Change Log"},{"location":"deployment/","text":"Deploy SCI-VCF for communal use SCI-VCF can be deployed using shiny-server for communal use. Sudo access might be required for this purpose. Such a deployment would make SCI-VCF accessible to everyone connected to the institute's intranet. Step 1: Install R sudo apt-get install r-base For installation guidelines, the documentation can be followed. Step 2: Install dependencies of SCI-VCF sudo su - -c \"R -e \\\"install.packages('shiny', repos='https://cran.rstudio.com/')\\\"\" sudo su - -c \"R -e \\\"install.packages('rmarkdown', repos='https://cran.rstudio.com/')\\\"\" sudo su - -c \"R -e \\\"install.packages('vcfR', repos='https://cran.rstudio.com/')\\\"\" sudo su - -c \"R -e \\\"install.packages('here', repos='https://cran.rstudio.com/')\\\"\" sudo su - -c \"R -e \\\"install.packages('ggplot2', repos='https://cran.rstudio.com/')\\\"\" sudo su - -c \"R -e \\\"install.packages('scales', repos='https://cran.rstudio.com/')\\\"\" sudo su - -c \"R -e \\\"install.packages('eulerr', repos='https://cran.rstudio.com/')\\\"\" sudo su - -c \"R -e \\\"install.packages('dplyr', repos='https://cran.rstudio.com/')\\\"\" sudo su - -c \"R -e \\\"install.packages('tidyr', repos='https://cran.rstudio.com/')\\\"\" sudo su - -c \"R -e \\\"install.packages('reshape2', repos='https://cran.rstudio.com/')\\\"\" sudo su - -c \"R -e \\\"install.packages('shiny', repos='https://cran.rstudio.com/')\\\"\" sudo su - -c \"R -e \\\"install.packages('shinycustomloader', repos='https://cran.rstudio.com/')\\\"\" sudo su - -c \"R -e \\\"install.packages('colourpicker', repos='https://cran.rstudio.com/')\\\"\" sudo su - -c \"R -e \\\"install.packages('plotly', repos='https://cran.rstudio.com/')\\\"\" sudo su - -c \"R -e \\\"install.packages('htmltools', repos='https://cran.rstudio.com/')\\\"\" sudo su - -c \"R -e \\\"install.packages('reactable', repos='https://cran.rstudio.com/')\\\"\" Step 3: Install shiny-server Get gdebi to install .deb files sudo apt-get install gdebi-core Get the .deb file for shiny-server wget https://download3.rstudio.org/ubuntu-18.04/x86_64/shiny-server-1.5.20.1002-amd64.deb Install shiny-server with gdebi sudo gdebi shiny-server-1.5.20.1002-amd64.deb Check the status of the shiny-server systemctl status shiny-server.service Verify that Shiny has been installed correctly Attempt a connection from a different machine on the same network by visiting: your.server.ip_address:3838 Step 4: Get SCI-VCF from GitHub and alter it Go to the shiny-server location cd /srv/shiny-server/ Get SCI-VCF sudo git clone https://github.com/HimanshuLab/SCI-VCF Alter the file structure sudo rm Dockerfile sudo rm README.md sudo rm -r conda/ Move all R files to the main directory sudo mv R/* ./ Delete the empty R directory sudo rm -r R Change the global.R file sudo vim global.R Change relative paths of all utilities. Change the below code block source(here(\"./R/summarize_vcf.R\")) source(here(\"./R/compare_vcf.R\")) source(here(\"./R/plot_vcf.R\")) source(here(\"./R/server.R\")) source(here(\"./R/ui.R\")) to source(here(\"./summarize_vcf.R\")) source(here(\"./compare_vcf.R\")) source(here(\"./plot_vcf.R\")) source(here(\"./server.R\")) source(here(\"./ui.R\")) Step 5: Check deployment SCI-VCF will now be available at your.server.ip_address/SCI-VCF/ Note: For better user experience, the hyperlinks in the tool can also be made to open in a new browser tab","title":"Deployment"},{"location":"deployment/#deploy-sci-vcf-for-communal-use","text":"SCI-VCF can be deployed using shiny-server for communal use. Sudo access might be required for this purpose. Such a deployment would make SCI-VCF accessible to everyone connected to the institute's intranet. Step 1: Install R sudo apt-get install r-base For installation guidelines, the documentation can be followed. Step 2: Install dependencies of SCI-VCF sudo su - -c \"R -e \\\"install.packages('shiny', repos='https://cran.rstudio.com/')\\\"\" sudo su - -c \"R -e \\\"install.packages('rmarkdown', repos='https://cran.rstudio.com/')\\\"\" sudo su - -c \"R -e \\\"install.packages('vcfR', repos='https://cran.rstudio.com/')\\\"\" sudo su - -c \"R -e \\\"install.packages('here', repos='https://cran.rstudio.com/')\\\"\" sudo su - -c \"R -e \\\"install.packages('ggplot2', repos='https://cran.rstudio.com/')\\\"\" sudo su - -c \"R -e \\\"install.packages('scales', repos='https://cran.rstudio.com/')\\\"\" sudo su - -c \"R -e \\\"install.packages('eulerr', repos='https://cran.rstudio.com/')\\\"\" sudo su - -c \"R -e \\\"install.packages('dplyr', repos='https://cran.rstudio.com/')\\\"\" sudo su - -c \"R -e \\\"install.packages('tidyr', repos='https://cran.rstudio.com/')\\\"\" sudo su - -c \"R -e \\\"install.packages('reshape2', repos='https://cran.rstudio.com/')\\\"\" sudo su - -c \"R -e \\\"install.packages('shiny', repos='https://cran.rstudio.com/')\\\"\" sudo su - -c \"R -e \\\"install.packages('shinycustomloader', repos='https://cran.rstudio.com/')\\\"\" sudo su - -c \"R -e \\\"install.packages('colourpicker', repos='https://cran.rstudio.com/')\\\"\" sudo su - -c \"R -e \\\"install.packages('plotly', repos='https://cran.rstudio.com/')\\\"\" sudo su - -c \"R -e \\\"install.packages('htmltools', repos='https://cran.rstudio.com/')\\\"\" sudo su - -c \"R -e \\\"install.packages('reactable', repos='https://cran.rstudio.com/')\\\"\" Step 3: Install shiny-server Get gdebi to install .deb files sudo apt-get install gdebi-core Get the .deb file for shiny-server wget https://download3.rstudio.org/ubuntu-18.04/x86_64/shiny-server-1.5.20.1002-amd64.deb Install shiny-server with gdebi sudo gdebi shiny-server-1.5.20.1002-amd64.deb Check the status of the shiny-server systemctl status shiny-server.service Verify that Shiny has been installed correctly Attempt a connection from a different machine on the same network by visiting: your.server.ip_address:3838 Step 4: Get SCI-VCF from GitHub and alter it Go to the shiny-server location cd /srv/shiny-server/ Get SCI-VCF sudo git clone https://github.com/HimanshuLab/SCI-VCF Alter the file structure sudo rm Dockerfile sudo rm README.md sudo rm -r conda/ Move all R files to the main directory sudo mv R/* ./ Delete the empty R directory sudo rm -r R Change the global.R file sudo vim global.R Change relative paths of all utilities. Change the below code block source(here(\"./R/summarize_vcf.R\")) source(here(\"./R/compare_vcf.R\")) source(here(\"./R/plot_vcf.R\")) source(here(\"./R/server.R\")) source(here(\"./R/ui.R\")) to source(here(\"./summarize_vcf.R\")) source(here(\"./compare_vcf.R\")) source(here(\"./plot_vcf.R\")) source(here(\"./server.R\")) source(here(\"./ui.R\")) Step 5: Check deployment SCI-VCF will now be available at your.server.ip_address/SCI-VCF/ Note: For better user experience, the hyperlinks in the tool can also be made to open in a new browser tab","title":"Deploy SCI-VCF for communal use"},{"location":"faq/","text":"FAQ General 1) Where can I access the latest SCI-VCF source code? You can access the source code via Github link. 2) How can I report bugs and suggest improvements in SCI-VCF? You can post your bugs and suggestions here. 3) How do I site SCI-VCF? Venkatesh Kamaraj, and Himanshu Sinha. \"SCI-VCF: A cross-platform GUI solution to Summarise, Compare, Inspect, and Visualise the Variant Call Format,\" 2024. https://doi.org/10.1101/2023.08.09.552664 Installation Conda 4) How to install SCI-VCF in Windows OS using conda? Step 1. Install WSL. Documentation Step 2. Install Miniconda inside WSL. Reference Step 3. Install MobaXterm Home edition. It is a free software that offers enhanced terminal for Windows with an X11 server. Documentation Step 4. Open a WSL terminal inside MobaXterm (Open MobaXterm --> Click on Sessions --> New Sessions --> WSL --> Select Linux distribution --> OK) Step 5. Follow the instructions in Conda based installation in the installation page Docker 5) How to run Docker container as a detached backend job and keep SCI-VCF always active? Run the docker image in detached mode. sudo docker run -d --rm -p 3000:3000 venkatk89/sci-vcf Now, SCI-VCF will always be active at http://0.0.0.0:3000/ 6) How to solve \u2018docker: Got permission denied while trying to connect to the Docker daemon socket at unix\u2019 error while installing SCI-VCF with Docker? Add your user to the docker group sudo usermod -a -G docker username If the issue still persist, the socket file can be made available to everyone instead of just the users in the docker group. sudo chmod 666 /var/run/docker.sock 7) How to solve \u2018xhost: unable to open display \u201c:0\u201d\u2019 while Docker installation of SCI-VCF? xhost local:docker Customization 8) How to increase the default upload size? Note: File upload size cannot be altered in the online version of SCI-VCF. It can only be done in the local/remote installation/deployments. Open R/global.R file in RStudio. Go to Line #20 #set maximum file upload size in shiny to 1 GB options(shiny.maxRequestSize = 1 * 1024^3) Edit the upoad file size according to your requirement. 9) How to change default file processing steps? Open R/summarize_vcf.R . Go to Line #4 break_multiallelic_sites = TRUE, remove_duplicated_entries = TRUE Disable the parameters according to your requirement. Output VCF files 10) Issues with SCI-VCF outputed VCF files? While the VCF format is conserved in the output file, the compression algorithm used is parallelized and is not gzip-based. Recent VCF processing software requires their input VCF files to be gzipped. To overcome this, decompress and recompress the SCI-VCF output VCFs using a gzip-based compressing algorithm: gunzip sci-vcf_output.vcf.gz gzip sci-vcf_output.vcf","title":"FAQ"},{"location":"faq/#faq","text":"","title":"FAQ"},{"location":"faq/#general","text":"1) Where can I access the latest SCI-VCF source code? You can access the source code via Github link. 2) How can I report bugs and suggest improvements in SCI-VCF? You can post your bugs and suggestions here. 3) How do I site SCI-VCF? Venkatesh Kamaraj, and Himanshu Sinha. \"SCI-VCF: A cross-platform GUI solution to Summarise, Compare, Inspect, and Visualise the Variant Call Format,\" 2024. https://doi.org/10.1101/2023.08.09.552664","title":"General"},{"location":"faq/#installation","text":"","title":"Installation"},{"location":"faq/#conda","text":"4) How to install SCI-VCF in Windows OS using conda? Step 1. Install WSL. Documentation Step 2. Install Miniconda inside WSL. Reference Step 3. Install MobaXterm Home edition. It is a free software that offers enhanced terminal for Windows with an X11 server. Documentation Step 4. Open a WSL terminal inside MobaXterm (Open MobaXterm --> Click on Sessions --> New Sessions --> WSL --> Select Linux distribution --> OK) Step 5. Follow the instructions in Conda based installation in the installation page","title":"Conda"},{"location":"faq/#docker","text":"5) How to run Docker container as a detached backend job and keep SCI-VCF always active? Run the docker image in detached mode. sudo docker run -d --rm -p 3000:3000 venkatk89/sci-vcf Now, SCI-VCF will always be active at http://0.0.0.0:3000/ 6) How to solve \u2018docker: Got permission denied while trying to connect to the Docker daemon socket at unix\u2019 error while installing SCI-VCF with Docker? Add your user to the docker group sudo usermod -a -G docker username If the issue still persist, the socket file can be made available to everyone instead of just the users in the docker group. sudo chmod 666 /var/run/docker.sock 7) How to solve \u2018xhost: unable to open display \u201c:0\u201d\u2019 while Docker installation of SCI-VCF? xhost local:docker","title":"Docker"},{"location":"faq/#customization","text":"8) How to increase the default upload size? Note: File upload size cannot be altered in the online version of SCI-VCF. It can only be done in the local/remote installation/deployments. Open R/global.R file in RStudio. Go to Line #20 #set maximum file upload size in shiny to 1 GB options(shiny.maxRequestSize = 1 * 1024^3) Edit the upoad file size according to your requirement. 9) How to change default file processing steps? Open R/summarize_vcf.R . Go to Line #4 break_multiallelic_sites = TRUE, remove_duplicated_entries = TRUE Disable the parameters according to your requirement.","title":"Customization"},{"location":"faq/#output-vcf-files","text":"10) Issues with SCI-VCF outputed VCF files? While the VCF format is conserved in the output file, the compression algorithm used is parallelized and is not gzip-based. Recent VCF processing software requires their input VCF files to be gzipped. To overcome this, decompress and recompress the SCI-VCF output VCFs using a gzip-based compressing algorithm: gunzip sci-vcf_output.vcf.gz gzip sci-vcf_output.vcf","title":"Output VCF files"},{"location":"gallery/","text":"Gallery Customize plots to your liking Interact with the plots: hover, zoom, pane, select input, change labels etc. Visualize occurance of variants in genomic ranges Get an overall view of the summary statistics Compare the summary statistics Compare entire VCF files Keyword-based search in a VCF file","title":"Gallery"},{"location":"gallery/#gallery","text":"Customize plots to your liking Interact with the plots: hover, zoom, pane, select input, change labels etc. Visualize occurance of variants in genomic ranges Get an overall view of the summary statistics Compare the summary statistics Compare entire VCF files Keyword-based search in a VCF file","title":"Gallery"},{"location":"get_started/","text":"Getting Started A guide to understand the workflows and submodules of SCI-VCF for summarizing, comparing, visualizing and analysing your VCF files. Summarize The summary of a VCF file is generated by classifying variants and summing up unique entries in each category. Summarize Submodules Upload VCF: Click the browse button and upload a VCF file. Overall Summary: Get an overall summary of the distribution of variants in each variant type. Summary Distribution: Visualize the distribution of different variant metrics along different contigs. Summary Comparison: Compare the distribution of variant metrics with each other. Variant Distribution: Visualize the occurrence of variants in different genomic ranges. SNP Distribution: Plot the count for all 12 possible SNP types in the VCF. INDEL Distribution: Plot the size distribution of INDELs in the VCF Download Summary: Extract the results as a tabular dataset for further analysis. Compare Unique and common variants in two VCF files are identified by using the first eight mandatory columns as two-dimensional heterogeneous tabular datasets. Compare Submodules Upload VCFs: Click the browse button and upload two VCF files in order. Venn Diagram: View area-proportional Venn diagram depicting the number of common and unique variant types. Overall Summaries: Get overall summaries for various variant types for unique and common variants. Summary Distribution: Visualize the distribution of different variant metrics along contigs for common and unique variants. Variants Distribution: Visualize the occurrence of unique and common variants in different genomic ranges. Download Summaries: Extract the results as a tabular dataset for further analysis. Download Variants: Extract the common and unique variants as a tabular dataset for further analysis. Interface SCI-VCF offers a framework to view, search, sort, identify, and filter the contents of a VCF file. Interface Submodules Upload VCF: Click the browse button and upload a VCF file. Meta-Information: View, search, and download the meta-information present in the uploaded file. Sort Variants: Sort variants in ascending order of CHROM, POS, REF, and ALT columns. Unique variant IDs can also be added in CHROM_POS_REF_ALT format. Variant Site Filtering: Filter variants from a particular genomic region. Variant Quality Filtering: Filter variants based on the FILTER and QUAL columns. Variant Type Filtering: Filter SNPs and INDELs separately. Search-based Filtering: View the contents of a VCF file and filter based on keyword search.","title":"Getting Started"},{"location":"get_started/#getting-started","text":"A guide to understand the workflows and submodules of SCI-VCF for summarizing, comparing, visualizing and analysing your VCF files.","title":"Getting Started"},{"location":"get_started/#summarize","text":"The summary of a VCF file is generated by classifying variants and summing up unique entries in each category.","title":"Summarize"},{"location":"get_started/#summarize-submodules","text":"Upload VCF: Click the browse button and upload a VCF file. Overall Summary: Get an overall summary of the distribution of variants in each variant type. Summary Distribution: Visualize the distribution of different variant metrics along different contigs. Summary Comparison: Compare the distribution of variant metrics with each other. Variant Distribution: Visualize the occurrence of variants in different genomic ranges. SNP Distribution: Plot the count for all 12 possible SNP types in the VCF. INDEL Distribution: Plot the size distribution of INDELs in the VCF Download Summary: Extract the results as a tabular dataset for further analysis.","title":"Summarize Submodules"},{"location":"get_started/#compare","text":"Unique and common variants in two VCF files are identified by using the first eight mandatory columns as two-dimensional heterogeneous tabular datasets.","title":"Compare"},{"location":"get_started/#compare-submodules","text":"Upload VCFs: Click the browse button and upload two VCF files in order. Venn Diagram: View area-proportional Venn diagram depicting the number of common and unique variant types. Overall Summaries: Get overall summaries for various variant types for unique and common variants. Summary Distribution: Visualize the distribution of different variant metrics along contigs for common and unique variants. Variants Distribution: Visualize the occurrence of unique and common variants in different genomic ranges. Download Summaries: Extract the results as a tabular dataset for further analysis. Download Variants: Extract the common and unique variants as a tabular dataset for further analysis.","title":"Compare Submodules"},{"location":"get_started/#interface","text":"SCI-VCF offers a framework to view, search, sort, identify, and filter the contents of a VCF file.","title":"Interface"},{"location":"get_started/#interface-submodules","text":"Upload VCF: Click the browse button and upload a VCF file. Meta-Information: View, search, and download the meta-information present in the uploaded file. Sort Variants: Sort variants in ascending order of CHROM, POS, REF, and ALT columns. Unique variant IDs can also be added in CHROM_POS_REF_ALT format. Variant Site Filtering: Filter variants from a particular genomic region. Variant Quality Filtering: Filter variants based on the FILTER and QUAL columns. Variant Type Filtering: Filter SNPs and INDELs separately. Search-based Filtering: View the contents of a VCF file and filter based on keyword search.","title":"Interface Submodules"},{"location":"glossory/","text":"Glossory VCF: Variant Call Format SCI-VCF: S ummarize, C ompare and I nteractively visualize the V ariant C all F ormat SNP: Single Nucleotide Polymorphism (A -> T) INDEL: Insertions (A -> ATCC) and Deletions (ATCC -> A) MNP: Multi Nucleotide Polymorphisms (AA -> GT)","title":"Glossory"},{"location":"glossory/#glossory","text":"VCF: Variant Call Format SCI-VCF: S ummarize, C ompare and I nteractively visualize the V ariant C all F ormat SNP: Single Nucleotide Polymorphism (A -> T) INDEL: Insertions (A -> ATCC) and Deletions (ATCC -> A) MNP: Multi Nucleotide Polymorphisms (AA -> GT)","title":"Glossory"},{"location":"installation/","text":"Installation for personal use SCI-VCF can be installed locally, in multiple ways! Online access Step 1: Open the SCI-VCF website. Note: Online version of SCI-VCF comes with upload size limitations. To get the full functionalities of SCI-VCF, use a local/server installation of the tool. RStudio based installation Prerequisites R (version > 4.2.3) (link) RStudio (link) Procedure Step 1: Get the SCI-VCF repository from GitHub. You can download the zipped version of the repo at this link Step 2: Extract the files in your computer. This will create a foler in you computer called SCI-VCF-main. Open that folder. Step 3: Launch SCI-VCF Open the folder named R . Open global.R with RStudio and click the Run App button. Note: The first time you launch SCI-VCF by clicking the Run App button, some dependencies will be downloaded. Kindly wait till then. You need to be connected to the internet and might need to give authorization if required. Once the dependencies are installed, SCI-VCF can be used offline thereafter. Conda based installation Prerequisites Conda (link) Command Line Interface Procedure Step 1: Get the SCI-VCF repository from GitHub git clone https://github.com/HimanshuLab/SCI-VCF Step 2: Open the SCI-VCF directory cd SCI-VCF Step 3: Create the conda environment with all required dependencies conda env create -f conda/SCI-VCF_conda_env.yaml Step 4: Activate the conda environment created conda activate SCI-VCF Step 5: Open global.R from the R directory in RStudio rstudio R/global.R Step 5: Launch SCI-VCF by clicking the Run App button. Note: For conda-based installation in Windoas OS, we recommend using the Windows Subsystem for Linux. More information is available in the FAQ section. Docker based installation Prerequisites Docker (link) . Web Browser Sudo privelleges Step 1: Get the SCI-VCF image from Docker Hub and run it sudo docker run -it --rm -p 3000:3000 venkatk89/sci-vcf Step 2: Open SCI-VCF via browser using the address below: http://0.0.0.0:3000/ Note: The docker command in step 1 is to run the container interactively, which makes SCI-VCF inactive when the terminal is exited. Docker containers can also be run detached from the terminal as a backend job. When the docker image is run this way, SCI-VCF will always stay active at the link mentioned in Step 2. More information is available in the FAQ section.","title":"Installation"},{"location":"installation/#installation-for-personal-use","text":"SCI-VCF can be installed locally, in multiple ways!","title":"Installation for personal use"},{"location":"installation/#online-access","text":"Step 1: Open the SCI-VCF website. Note: Online version of SCI-VCF comes with upload size limitations. To get the full functionalities of SCI-VCF, use a local/server installation of the tool.","title":"Online access"},{"location":"installation/#rstudio-based-installation","text":"","title":"RStudio based installation"},{"location":"installation/#prerequisites","text":"R (version > 4.2.3) (link) RStudio (link)","title":"Prerequisites"},{"location":"installation/#procedure","text":"Step 1: Get the SCI-VCF repository from GitHub. You can download the zipped version of the repo at this link Step 2: Extract the files in your computer. This will create a foler in you computer called SCI-VCF-main. Open that folder. Step 3: Launch SCI-VCF Open the folder named R . Open global.R with RStudio and click the Run App button. Note: The first time you launch SCI-VCF by clicking the Run App button, some dependencies will be downloaded. Kindly wait till then. You need to be connected to the internet and might need to give authorization if required. Once the dependencies are installed, SCI-VCF can be used offline thereafter.","title":"Procedure"},{"location":"installation/#conda-based-installation","text":"","title":"Conda based installation"},{"location":"installation/#prerequisites_1","text":"Conda (link) Command Line Interface","title":"Prerequisites"},{"location":"installation/#procedure_1","text":"Step 1: Get the SCI-VCF repository from GitHub git clone https://github.com/HimanshuLab/SCI-VCF Step 2: Open the SCI-VCF directory cd SCI-VCF Step 3: Create the conda environment with all required dependencies conda env create -f conda/SCI-VCF_conda_env.yaml Step 4: Activate the conda environment created conda activate SCI-VCF Step 5: Open global.R from the R directory in RStudio rstudio R/global.R Step 5: Launch SCI-VCF by clicking the Run App button. Note: For conda-based installation in Windoas OS, we recommend using the Windows Subsystem for Linux. More information is available in the FAQ section.","title":"Procedure"},{"location":"installation/#docker-based-installation","text":"","title":"Docker based installation"},{"location":"installation/#prerequisites_2","text":"Docker (link) . Web Browser Sudo privelleges Step 1: Get the SCI-VCF image from Docker Hub and run it sudo docker run -it --rm -p 3000:3000 venkatk89/sci-vcf Step 2: Open SCI-VCF via browser using the address below: http://0.0.0.0:3000/ Note: The docker command in step 1 is to run the container interactively, which makes SCI-VCF inactive when the terminal is exited. Docker containers can also be run detached from the terminal as a backend job. When the docker image is run this way, SCI-VCF will always stay active at the link mentioned in Step 2. More information is available in the FAQ section.","title":"Prerequisites"}]}